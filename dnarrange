#! /usr/bin/env python
# Copyright 2018 Martin C. Frith

from __future__ import print_function

import functools
import gzip
import heapq
import logging
import math
import optparse
import os
import re
import signal
import sys
import textwrap
from itertools import chain, groupby
from operator import itemgetter

def myOpen(fileName):  # faster than fileinput
    if fileName == "-":
        return sys.stdin
    if fileName.endswith(".gz"):
        return gzip.open(fileName, "rt")  # xxx dubious for Python2
    return open(fileName)

def connectedComponent(adjacencyList, nodePriorities, isNew, i, isFlipped):
    newItem = nodePriorities[i], i, isFlipped
    heap = [newItem]
    isNew[i] = False
    while heap:
        _, j, isFlipped = heapq.heappop(heap)
        yield j, isFlipped
        for k, isOpposite in adjacencyList[j]:
            if isNew[k]:
                newItem = nodePriorities[k], k, isOpposite != isFlipped
                heapq.heappush(heap, newItem)
                isNew[k] = False

def connectedComponents(adjacencyList, nodePriorities, isRev):
    isNew = [True for i in adjacencyList]
    s = sorted((x, i) for i, x in enumerate(nodePriorities))
    for _, i in s:
        if isNew[i]:
            yield list(connectedComponent(adjacencyList, nodePriorities,
                                          isNew, i, isRev[i]))

def dataFromMafFields(fields):
    seqName, start, span, strand, seqLen, seq = fields[1:7]
    beg = int(start)
    seqLen = int(seqLen)
    if strand == "-":
        beg -= seqLen  # use negative coordinates for reverse strands
    return seqName, seqLen, beg, seq

def splitAtBigGaps(opts, refBeg, qryBeg, refSeq, qrySeq):
    minGap = int(math.ceil(opts.min_gap))
    alnLen = len(qrySeq)
    gapString = "-" * min(minGap, alnLen + 1)
    alnPos = 0
    while alnPos < alnLen:
        gapBeg = qrySeq.find(gapString, alnPos)
        if gapBeg < 0:
            gapBeg = gapEnd = alnLen
        else:
            gapEnd = gapBeg + minGap
            while gapEnd < alnLen and qrySeq[gapEnd] == "-":
                gapEnd += 1
            while gapEnd < alnLen and refSeq[gapEnd] == "-":
                gapEnd += 1
            while gapBeg > alnPos and refSeq[gapBeg - 1] == "-":
                gapBeg -= 1
        dist = gapBeg - alnPos
        refEnd = refBeg + dist - refSeq.count("-", alnPos, gapBeg)
        qryEnd = qryBeg + dist - qrySeq.count("-", alnPos, gapBeg)
        yield qryBeg, qryEnd, refBeg, refEnd
        gapLen = gapEnd - gapBeg
        refBeg = refEnd + gapLen - refSeq.count("-", gapBeg, gapEnd)
        qryBeg = qryEnd + gapLen - qrySeq.count("-", gapBeg, gapEnd)
        alnPos = gapEnd

def splitTabAtBigGaps(opts, refBeg, qryBeg, gapText):
    refEnd = refBeg
    qryEnd = qryBeg
    for i in gapText.split(","):
        if ":" in i:
            refInsert, qryInsert = i.split(":")
            refInsert = int(refInsert)
            qryInsert = int(qryInsert)
            if refInsert >= opts.min_gap:
                yield qryBeg, qryEnd, refBeg, refEnd
                refBeg = refEnd + refInsert
                qryBeg = qryEnd + qryInsert
            refEnd += refInsert
            qryEnd += qryInsert
        else:
            size = int(i)
            refEnd += size
            qryEnd += size
    yield qryBeg, qryEnd, refBeg, refEnd

def mismapFromFields(fields):
    for i in fields:
        if i.startswith("mismap="):
            return float(i[7:])
    return 0.0

def alignmentsFromLines(opts, lines):
    refSeq = qrySeq = None
    qryId = 0
    qryEnd = 0
    for line in lines:
        if line[0].isdigit():
            fields = line.split()
            if len(fields) < 12:  # shrunk format
                qryBeg = qryEnd + int(fields[0])
                qryLen = int(fields[1])
                qryEnd = qryBeg + qryLen
                if len(fields) > 4:
                    refName = fields[4]
                    refBeg = int(fields[2])
                else:
                    refBeg = refEnd + int(fields[2])
                refEnd = refBeg + qryLen + int(fields[3])
                alns = [(qryBeg, qryEnd, refBeg, refEnd)]
                yield str(qryId), 0, refName, alns, fields
            else:  # LAST tabular format
                mismap = mismapFromFields(fields[12:])
                if mismap <= opts.max_mismap:
                    refName, refLen, refBeg, rj = dataFromMafFields(fields)
                    qryName, qryLen, qryBeg, qj = dataFromMafFields(fields[5:])
                    alns = splitTabAtBigGaps(opts, refBeg, qryBeg, qj)
                    yield qryName, qryLen, refName, alns, fields
        elif line[0].isalpha():  # MAF format
            if line[0] == "a":
                if qrySeq:
                    yield qryName, qryLen, refName, alns, mafLines
                mafLines = []
                refSeq = qrySeq = None
                mismap = mismapFromFields(line.split())
            elif line[0] == "s" and mismap <= opts.max_mismap:
                fields = line.split()
                if refSeq is None:
                    refName, refLen, refBeg, refSeq = dataFromMafFields(fields)
                else:
                    qryName, qryLen, qryBeg, qrySeq = dataFromMafFields(fields)
                    alns = splitAtBigGaps(opts, refBeg, qryBeg, refSeq, qrySeq)
            mafLines.append(line)
        else:
            qryId += 1
            qryEnd = 0
    if qrySeq:
        yield qryName, qryLen, refName, alns, mafLines

def isCircularChromosome(name):
    return name in ("chrM", "M")  # xxx ???

def isKnownChromosome(name):
    unknownPrefixes = "chrUn", "Un"  # xxx ???
    return not name.startswith(unknownPrefixes)

def chromosomeFromName(name):
    return name.split("_")[0]  # e.g. chr5_random -> chr5

def isDifferentChromosomes(nameX, nameY):
    return (isKnownChromosome(nameX) and isKnownChromosome(nameY) and
            chromosomeFromName(nameX) != chromosomeFromName(nameY))

def refNameAndStrand(alignment):
    return alignment[3], alignment[4] < 0

def knownChromosomes(alignments):
    for i in alignments:
        refName = i[3]
        if isKnownChromosome(refName):
            yield chromosomeFromName(refName)

def isInterChromosome(alignments):
    """Is any pair of alignments on different chromosomes?"""
    return len(set(knownChromosomes(alignments))) > 1

def isInterStrand(alignments):
    """Is any pair of alignments on opposite strands of the same chromosome?"""
    names = set(i[3] for i in alignments)
    namesAndStrands = set(map(refNameAndStrand, alignments))
    return len(namesAndStrands) > len(names)

def isNonlinear(sortedAlignmentsOfOneQuery, opts):
    """Is any pair of alignments non-colinear on the same strand?"""
    maxCoordinates = {}
    for i in sortedAlignmentsOfOneQuery:
        if isCircularChromosome(i[3]):
            continue
        k = refNameAndStrand(i)
        if k in maxCoordinates:
            m = maxCoordinates[k]
            if m >= i[4] + opts.min_rev:
                return True
            if i[5] > m:
                maxCoordinates[k] = i[5]
        else:
            maxCoordinates[k] = i[5]
    return False

def isBigGap(sortedAlignmentsOfOneQuery, opts):
    """Is any pair of adjacent aligments separated by a big genomic gap?"""
    for j, y in enumerate(sortedAlignmentsOfOneQuery):
        if j:
            x = sortedAlignmentsOfOneQuery[j - 1]
            if refNameAndStrand(x) == refNameAndStrand(y):
                if y[4] - x[5] >= opts.min_gap:
                    return True
    return False

def isRearranged(opts, alignmentsOfOneQuery):
    return ("C" in opts.types and isInterChromosome(alignmentsOfOneQuery) or
            "S" in opts.types and isInterStrand(alignmentsOfOneQuery) or
            "N" in opts.types and isNonlinear(alignmentsOfOneQuery, opts) or
            "G" in opts.types and isBigGap(alignmentsOfOneQuery, opts))

def qryFwdAlns(alignmentGroup):
    for qryName, qryLen, refName, alns, junk in alignmentGroup:
        for qryBeg, qryEnd, refBeg, refEnd in alns:
            if qryBeg < 0:  # use forward strand of query:
                qryBeg, qryEnd = -qryEnd, -qryBeg
                refBeg, refEnd = -refEnd, -refBeg
            yield qryName, qryBeg, qryEnd, refName, refBeg, refEnd

def newAlnFromOldAln(oldAln, qryNum, alnNum):
    qryName, qryBeg, qryEnd, refName, refBeg, refEnd = oldAln
    if refBeg < 0:  # use forward strand of reference:
        refBeg, refEnd = -refEnd, -refBeg
        qryBeg, qryEnd = -qryEnd, -qryBeg
    return qryNum, qryBeg, qryEnd, refName, refBeg, refEnd, alnNum, []

def alignmentsPerRearrangedQuerySequence(opts, fileNames):
    qryNum = 0
    alnNum = 0
    for fileNum, fileName in enumerate(fileNames):
        logging.info("reading {0}...".format(fileName))
        alignments = alignmentsFromLines(opts, myOpen(fileName))
        for key, group in groupby(alignments, itemgetter(0, 1)):
            qryName, qryLen = key
            group = list(group)
            alignmentsOfOneQuery = sorted(qryFwdAlns(group))
            if isRearranged(opts, alignmentsOfOneQuery):
                newAlns = []
                for i in alignmentsOfOneQuery:
                    newAlns.append(newAlnFromOldAln(i, qryNum, alnNum))
                    alnNum += 1
                alignmentTexts = [i[4] for i in group]
                yield newAlns, alignmentTexts, fileNum + 1, qryName
                qryNum += 1

def alignedQueryLength(alignmentsOfOneQuery):
    return sum(i[2] - i[1] for i in alignmentsOfOneQuery)

def overlappingAlignmentPairs(myAlignmentsInGenomeOrder):
    stash = []
    for alnB in myAlignmentsInGenomeOrder:
        newStash = []
        for alnA in stash:
            if alnA[3] == alnB[3] and alnA[5] > alnB[4]:
                yield alnA, alnB
                newStash.append(alnA)
        stash = newStash
        stash.append(alnB)

def addNgOverlaps(okAlignmentsInGenomeOrder, ngAlignmentsInGenomeOrder):
    logging.info("finding overlaps for exclusion...")
    stash = []
    ngPos = 0
    for alnA in okAlignmentsInGenomeOrder:
        refNameA, refBegA, refEndA = alnA[3:6]
        while ngPos < len(ngAlignmentsInGenomeOrder):
            alnB = ngAlignmentsInGenomeOrder[ngPos]
            if (alnB[3], alnB[4]) >= (refNameA, refBegA):
                break
            stash.append(alnB)
            ngPos += 1
        stash = [i for i in stash if i[3] == refNameA and i[5] > refBegA]
        alnA[7].extend(i[6] for i in stash)
        ngEnd = ngPos
        while ngEnd < len(ngAlignmentsInGenomeOrder):
            alnB = ngAlignmentsInGenomeOrder[ngEnd]
            if alnB[3] > refNameA or alnB[4] >= refEndA:
                break
            alnA[7].append(alnB[6])
            ngEnd += 1

def addOverlaps(myAlignmentsInGenomeOrder):
    logging.info("finding overlaps...")
    for alnA, alnB in overlappingAlignmentPairs(myAlignmentsInGenomeOrder):
        if alnA[0] < alnB[0]:
            alnA[7].append(alnB[6])
        if alnB[0] < alnA[0]:
            alnB[7].append(alnA[6])

def delOverlaps(alignments):
    for i in alignments:
        myList = i[7]
        del myList[:]

def overlapsOfOneQuery(alignments, alignmentsOfOneQuery):
    for alnA in alignmentsOfOneQuery:
        alnNumA = alnA[6]
        for alnNumB in alnA[7]:
            qryNumB = alignments[alnNumB][0]
            yield qryNumB, alnNumA, alnNumB

def isSameQueryStrand(alnA, alnB):
    return (alnA[1] < 0) == (alnB[1] < 0)

def isAdjacent(alnX, alnY):
    return alnX[6] + 1 == alnY[6] or alnY[6] + 1 == alnX[6]

def isNonlinearPair(opts, alnX, alnY):
    if alnX[3] != alnY[3]:
        return "C" in opts.types and isDifferentChromosomes(alnX[3], alnY[3])
    if not isSameQueryStrand(alnX, alnY):
        return "S" in opts.types
    if alnX[1] < alnY[1]:        
        gap = alnY[4] - alnX[5]
    else:
        gap = alnX[4] - alnY[5]
    if "N" in opts.types and gap + opts.min_rev <= 0:
        if not isCircularChromosome(alnX[3]):
            return True
    if "G" in opts.types and gap >= opts.min_gap:
        if isAdjacent(alnX, alnY):
            return True
    return False

def alignmentEdges(alnA, alnB, isGetEnds):
    if isGetEnds:
        return -alnA[2], -alnA[5], -alnB[2], -alnB[5]
    else:
        return alnA[1], alnA[4], alnB[1], alnB[4]

def isSharedRearrangement(opts, alnAX, alnAY, alnBX, alnBY):
    # alnAX of query sequence A overlaps alnBX of query sequence B
    # alnAY of query sequence A overlaps alnBY of query sequence B
    # alnAX is upstream of alnAY in query sequence A

    qryAX, refAX, qryBX, refBX = alignmentEdges(alnAX, alnBX, alnAX[1] >= 0)
    qryAY, refAY, qryBY, refBY = alignmentEdges(alnAY, alnBY, alnAY[1] < 0)

    qryDistanceA = qryAX + qryAY
    qryDistanceB = qryBX + qryBY
    begDiff = refAX - refBX
    endDiff = refBY - refAY
    if abs(qryDistanceB - qryDistanceA + begDiff - endDiff) > opts.max_diff:
        return False

    if alnAX[3] != alnAY[3] or not isSameQueryStrand(alnAX, alnAY):
        return True

    gapA = refAX + refAY
    gapB = refBX + refBY
    gapAtoB = refAX + refBY
    gapBtoA = refBX + refAY

    if gapA < 0:  # type "N"
        if gapB + opts.min_rev > 0:
            return False
        if gapB * 2 > gapA or gapA * 2 > gapB:
            return False
        return gapAtoB < 0 and gapBtoA < 0
    else:  # type "G"
        if gapB < opts.min_gap or not isAdjacent(alnBX, alnBY):
            return False
        if gapB * 2 < gapA or gapA * 2 < gapB:
            return False
        return gapAtoB > 0 and gapBtoA > 0

def sharedRearrangement(opts, alignments, overlapsBetweenTwoQueries):
    # "A" refers to a query sequence
    # "B" refers to a different query sequence
    groups = groupby(overlapsBetweenTwoQueries, itemgetter(1))
    overlapsPerAlnA = [(alnNumA, [i[2] for i in v]) for alnNumA, v in groups]

    for alnNumAY, alnNumsBY in overlapsPerAlnA:
        for alnNumAX, alnNumsBX in overlapsPerAlnA:
            if alnNumAX == alnNumAY:
                break
            alnAX = alignments[alnNumAX]
            alnAY = alignments[alnNumAY]
            if not isNonlinearPair(opts, alnAX, alnAY):
                continue
            for alnNumBY in alnNumsBY:
                for alnNumBX in alnNumsBX:
                    if alnNumBX == alnNumBY:
                        continue
                    alnBX = alignments[alnNumBX]
                    alnBY = alignments[alnNumBY]
                    isSameStrand = isSameQueryStrand(alnAY, alnBY)
                    if isSameQueryStrand(alnAX, alnBX) != isSameStrand:
                        continue
                    isUpstreamInQueryA = (alnNumAX < alnNumAY)
                    isUpstreamInQueryB = (alnNumBX < alnNumBY)
                    isSameOrder = (isUpstreamInQueryA == isUpstreamInQueryB)
                    if isSameOrder != isSameStrand:
                        continue
                    if isSharedRearrangement(opts, alnAX, alnAY, alnBX, alnBY):
                        return "-+"[isSameStrand]
    return None

def isNoSharedRearrangement(opts, alignments, alignmentsOfOneOkQuery):
    overlaps = sorted(overlapsOfOneQuery(alignments, alignmentsOfOneOkQuery))
    for qryNumB, g in groupby(overlaps, itemgetter(0)):
        if sharedRearrangement(opts, alignments, g):
            return False
    return True

def linksBetweenQueries(opts, alignments, alignmentsPerQuery):
    logging.info("linking...")
    for alignmentsOfOneQuery in alignmentsPerQuery:
        qryNumA = alignmentsOfOneQuery[0][0]
        overlaps = sorted(overlapsOfOneQuery(alignments, alignmentsOfOneQuery))
        for qryNumB, g in groupby(overlaps, itemgetter(0)):
            strand = sharedRearrangement(opts, alignments, g)
            if strand:
                yield qryNumA, qryNumB, strand == "-"

def isOverlap(alnA, alnB):
    return alnA[3] == alnB[3] and alnA[4] < alnB[5] and alnA[5] > alnB[4]

def prevAlignment(alignments, thisAlignment):
    alnNum = thisAlignment[6]
    if alnNum == 0: return None
    a = alignments[alnNum - 1]
    return a if a[0] == thisAlignment[0] else None

def nextAlignment(alignments, thisAlignment):
    alnNum = thisAlignment[6]
    if alnNum == len(alignments) - 1: return None
    a = alignments[alnNum + 1]
    return a if a[0] == thisAlignment[0] else None

def addJumpIfShared(alignments, alnA, alnB):
    alnAX = prevAlignment(alignments, alnA)
    isSameStrand = isSameQueryStrand(alnA, alnB)
    if isSameStrand:
        alnBX = prevAlignment(alignments, alnB)
    else:
        alnBX = nextAlignment(alignments, alnB)
    if alnAX is None or alnBX is None:
        return
    if not isOverlap(alnAX, alnBX):
        return
    if isSameQueryStrand(alnAX, alnBX) != isSameStrand:
        return
    if isSharedRearrangement(opts, alnAX, alnA, alnBX, alnB):
        alnA[7].append(alnB[0])

def addSharedJumps(alignments, myAlignmentsInGenomeOrder):
    logging.info("finding shared jumps...")
    for alnA, alnB in overlappingAlignmentPairs(myAlignmentsInGenomeOrder):
        if alnA[0] != alnB[0]:
            addJumpIfShared(alignments, alnA, alnB)
            addJumpIfShared(alignments, alnB, alnA)

def isAllJumpsSupported(opts, alignmentsOfOneQuery):
    for j, y in enumerate(alignmentsOfOneQuery):
        if j:
            x = alignmentsOfOneQuery[j - 1]
            if isNonlinearPair(opts, x, y):
                if len(set(y[7])) < opts.min_cov:
                    return False
    return True

def querySortKey(alignmentsOfOneQuery):
    return min(a[3:6] for a in alignmentsOfOneQuery)

def clumpSortKey(alignmentsPerQuery, clump):
    k = min(querySortKey(alignmentsPerQuery[i]) for i, isFlipped in clump)
    return -len(clump), k

def alignmentsInGenomeOrder(alignmentsPerQuery):
    logging.info("sorting...")
    alignments = chain.from_iterable(alignmentsPerQuery)
    return sorted(alignments, key=itemgetter(3, 4))

def alignmentsOfCoveredQueries(opts, alignments, alignmentsPerQuery):
    while True:
        oldLen = len(alignmentsPerQuery)
        logging.info("queries: " + str(oldLen))
        myAlignmentsInGenomeOrder = alignmentsInGenomeOrder(alignmentsPerQuery)
        if opts.min_cov:
            addSharedJumps(alignments, myAlignmentsInGenomeOrder)
            logging.info("excluding...")
            alignmentsPerQuery = [i for i in alignmentsPerQuery
                                  if isAllJumpsSupported(opts, i)]
            delOverlaps(myAlignmentsInGenomeOrder)
        if len(alignmentsPerQuery) == oldLen:
            return alignmentsPerQuery, myAlignmentsInGenomeOrder

def newStrand(strand, isFlipped):
    return "-+"[isFlipped == (strand == "-")]

def qryNameWithStrand(qryName, isFlipped):
    qryNameEnd = qryName[-1]
    isAddChar = qryNameEnd not in "+-"
    qryBase = qryName if isAddChar else qryName[:-1]
    newQryName = qryBase + newStrand(qryNameEnd, isFlipped)
    return newQryName, isAddChar

def printMaf(lines, isFlipped):
    lines = [re.split("(\s+)", i, 5) for i in lines]
    sLines = [i for i in lines if i[0] == "s"]
    qryLine = sLines[-1]
    qryName = qryLine[2]
    newQryName, isAddChar = qryNameWithStrand(qryName, isFlipped)
    qryLine[8] = newStrand(qryLine[8], isFlipped)
    sLineCount = 0
    for line in lines:
        if line[0] in "sq":
            if line[0] == "s":
                sLineCount += 1
            if sLineCount == len(sLines) and line[2] == qryName:
                line[2] = newQryName
            elif isAddChar:
                line[2] += " "
        elif line[0] == "p":
            if isAddChar:
                line[0] += " "
        print("".join(line), end="")
    print()

def printTab(fields, isFlipped):
    qryName = fields[6]
    newQryName, isAddChar = qryNameWithStrand(qryName, isFlipped)
    fields[6] = newQryName
    fields[9] = newStrand(fields[9], isFlipped)
    print(*fields, sep="\t")

def printShrunk(alignmentsOfOneQuery):
    oldRefName = None
    qryInc = 0
    for i in alignmentsOfOneQuery:
        qryNum, qryBeg, qryEnd, refName, refBeg, refEnd = i[:6]
        if qryBeg < 0:
            qryBeg, qryEnd = -qryEnd, -qryBeg
            refBeg, refEnd = -refEnd, -refBeg
        qryLen = qryEnd - qryBeg
        refLen = refEnd - refBeg
        refLenInc = refLen - qryLen
        if oldRefName:
            qryInc = qryBeg - oldQryEnd
        if refName != oldRefName:
            print(qryInc, qryLen, refBeg, refLenInc, refName, sep="\t")
        else:
            refInc = refBeg - oldRefEnd
            print(qryInc, qryLen, refInc, refLenInc, sep="\t")
        oldRefName = refName
        oldQryEnd = qryEnd
        oldRefEnd = refEnd
    print()

def printAlignments(opts, alnsPerKeptQuery, alignmentTextsPerQuery):
    for i in alnsPerKeptQuery:
        if opts.shrink:
            printShrunk(i)
        else:
            qryNum = i[0][0]
            for t in alignmentTextsPerQuery[qryNum]:
                separator = "" if t[0][0] == "a" else "\t"
                print(*t, sep=separator)

def alignmentsPerKeptQuery(numOfCaseFiles, dataPerQuery, alignments):
    okAlns = [i[0] for i in dataPerQuery if i[2] <= numOfCaseFiles]
    ngAlns = [i[0] for i in dataPerQuery if i[2] > numOfCaseFiles]
    if not ngAlns:
        return okAlns
    okAlignmentsInGenomeOrder = alignmentsInGenomeOrder(okAlns)
    ngAlignmentsInGenomeOrder = alignmentsInGenomeOrder(ngAlns)
    addNgOverlaps(okAlignmentsInGenomeOrder, ngAlignmentsInGenomeOrder)
    logging.info("excluding...")
    out = [i for i in okAlns if isNoSharedRearrangement(opts, alignments, i)]
    delOverlaps(okAlignmentsInGenomeOrder)
    return out

def wantedClumps(minNumOfFiles, fileNumsPerQuery, clumps):
    for clumpNum, clump in enumerate(clumps):
        fileNums = set(fileNumsPerQuery[qryNum] for qryNum, isFlipped in clump)
        if len(fileNums) >= minNumOfFiles:
            clumpName = "group{0}-{1}".format(clumpNum + 1, len(clump))
            yield clumpName, clump

def flippedAlignment(alignment, isFlipped):
    qryNum, qryBeg, qryEnd, refName, refBeg, refEnd = alignment[:6]
    # use reverse strand of query if isFlipped, else forward strand:
    if (qryBeg < 0) != isFlipped:
        qryBeg, qryEnd = -qryEnd, -qryBeg
        refBeg, refEnd = -refEnd, -refBeg
    return qryNum, qryBeg, qryEnd, refName, refBeg, refEnd

def rangeText(refRange):
    refName, refBeg, refEnd = refRange
    sign = ">" if refBeg < 0 else "<"
    return "{0}:{1}{2}{3}".format(refName, abs(refBeg), sign, abs(refEnd))

def isJoinableAlignments(opts, x, y):
    if refNameAndStrand(x) != refNameAndStrand(y):
        return False
    if y[4] >= x[5] + opts.min_gap:
        return False
    if y[1] >= x[2] + opts.min_gap:
        return False
    if x[5] >= y[4] + opts.min_rev or x[5] >= y[5]:
        return False
    return True

def refRangesFromFlippedAlns(opts, flippedAlns):
    for j, y in enumerate(flippedAlns):
        if j:
            x = flippedAlns[j - 1]
            if isJoinableAlignments(opts, x, y):
                refEnd = y[5]
                continue
            yield refName, refBeg, refEnd
        refName, refBeg, refEnd = y[3:6]
    yield refName, refBeg, refEnd

def qrySummary(opts, queryNames, alignmentsPerQuery, qryNum, isFlipped):
    qryName = queryNames[qryNum]
    newQryName, isAddChar = qryNameWithStrand(qryName, isFlipped)
    alns = alignmentsPerQuery[qryNum]
    flippedAlns = sorted(flippedAlignment(i, isFlipped) for i in alns)
    refRanges = refRangesFromFlippedAlns(opts, flippedAlns)
    texts = [rangeText(i) for i in refRanges]
    return newQryName, texts

def main(opts, args):
    logLevel = logging.INFO if opts.verbose else logging.WARNING
    logging.basicConfig(format="%(filename)s: %(message)s", level=logLevel)

    if not args:
        args.append("-")
    if ":" not in args:
        args.append(":")
    colonPos = args.index(":")
    colonEnd = colonPos + 1
    fileNames = args[:colonPos] + args[colonEnd:]

    dataPerQuery = list(alignmentsPerRearrangedQuerySequence(opts, fileNames))
    alignmentsPerQuery = [i[0] for i in dataPerQuery]
    alignmentTextsPerQuery = [i[1] for i in dataPerQuery]
    fileNumsPerQuery = [i[2] for i in dataPerQuery]
    queryNames = [i[3] for i in dataPerQuery]
    alignments = list(chain.from_iterable(alignmentsPerQuery))

    alnsPerKeptQuery = alignmentsPerKeptQuery(colonPos,
                                              dataPerQuery, alignments)

    cov = alignmentsOfCoveredQueries(opts, alignments, alnsPerKeptQuery)
    alnsPerKeptQuery, myAlignmentsInGenomeOrder = cov

    print("#", os.path.basename(sys.argv[0]), *sys.argv[1:])
    print()

    if opts.min_seqs < 1:
        return printAlignments(opts, alnsPerKeptQuery, alignmentTextsPerQuery)

    addOverlaps(myAlignmentsInGenomeOrder)

    adjacencyList = [[] for i in alignmentsPerQuery]
    links = linksBetweenQueries(opts, alignments, alnsPerKeptQuery)
    for qryNumA, qryNumB, isOpposite in links:
        adjacencyList[qryNumA].append((qryNumB, isOpposite))
        adjacencyList[qryNumB].append((qryNumA, isOpposite))

    logging.info("grouping...")
    isRevStrand = [i[0][1] < 0 and i[-1][1] < 0 for i in alignmentsPerQuery]
    qryPriorities = [(-len(i), -alignedQueryLength(j))
                     for i, j in zip(adjacencyList, alignmentsPerQuery)]
    allClumps = connectedComponents(adjacencyList, qryPriorities, isRevStrand)
    clumps = [i for i in allClumps if len(i) >= opts.min_seqs]
    clumps.sort(key=functools.partial(clumpSortKey, alignmentsPerQuery))
    goodClumps = list(wantedClumps(colonPos, fileNumsPerQuery, clumps))

    if not opts.shrink:
        for clumpName, clump in goodClumps:
            print("#", clumpName)
            s = [qrySummary(opts, queryNames, alignmentsPerQuery, *i)
                 for i in clump]
            width = max(len(newQryName) for newQryName, ranges in s)
            for newQryName, ranges in s:
                paddedName = format(newQryName, str(width))
                para = " ".join([paddedName] + ranges)
                print(textwrap.fill(para, 79, break_long_words=False,
                                    break_on_hyphens=False,
                                    initial_indent="# ",
                                    subsequent_indent="#  "))
            print()

    for clumpName, clump in goodClumps:
        if opts.shrink:
            for qryNum, isFlipped in clump:
                printShrunk(alignmentsPerQuery[qryNum])
            print()
        else:
            print("# PART", clumpName)
            print()
            for qryNum, isFlipped in clump:
                for t in alignmentTextsPerQuery[qryNum]:
                    if t[0][0] == "a":
                        printMaf(t, isFlipped)
                    elif len(t) > 11:
                        printTab(t, isFlipped)
                    else:  # shrunk format:
                        print(*t, sep="\t")
                print()

    txt = "wrote {0} of {1} groups\n".format(len(goodClumps), len(clumps))
    sys.stdout.flush()
    sys.stderr.write(txt)

if __name__ == "__main__":
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)  # avoid silly error message
    usage = "%prog [options] case-file(s) [: control-file(s)]"
    descr = "Find rearranged query sequences in query-to-reference alignments."
    op = optparse.OptionParser(usage=usage, description=descr)
    op.add_option("-s", "--min-seqs", type="int", default=2, metavar="N",
                  help="minimum query sequences per group (default=%default)")
    op.add_option("-t", "--types", metavar="LETTERS", default="CSNG", help=
                  "rearrangement types: C=inter-chromosome, S=inter-strand, "
                  "N=non-colinear, G=big gap (default=%default)")
    op.add_option("-g", "--min-gap", type="float", default=10000, metavar="BP",
                  help='minimum forward jump in the reference sequence '
                  'counted as a "big gap" (default=%default)')
    op.add_option("-r", "--min-rev", type="float", default=1000, metavar="BP",
                  help='minimum reverse jump in the reference sequence '
                  'counted as "non-colinear" (default=%default)')
    op.add_option("-d", "--max-diff", type="float", default=1000, metavar="BP",
                  help="maximum query-length difference for "
                  "shared rearrangement (default=%default)")
    op.add_option("-c", "--min-cov", type="int", default=0, metavar="N", help=
                  "omit any query with any rearrangement shared by < N "
                  "other queries (default=%default)")
    op.add_option("-m", "--max-mismap", type="float", default=1.0,
                  metavar="PROB", help="discard any alignment with "
                  "mismap probability > PROB (default=%default)")
    op.add_option("--shrink", action="count", help="shrink the output")
    op.add_option("-v", "--verbose", action="count",
                  help="show progress messages")
    opts, args = op.parse_args()
    main(opts, args)
